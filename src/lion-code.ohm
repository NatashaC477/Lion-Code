LionCode {
  Program
    = Statement+

  Statement
    = WhileStatement
    | IfStatement
    | PrintStatement
    | FunctionDeclaration
    | AssignmentStatement
    | ReturnStatement
    | Comment

  WhileStatement
    = "Prowl" optSpace Identifier optSpace "in" optSpace rangeExpr Block

  rangeExpr
    = "range" "(" number ")"

  IfStatement
    = "if" optSpace "(" Condition ")" Block ElseOption? OtherwiseOption?

  ElseOption
    = optSpace "else" optSpace "(" Condition ")" Block
    
  OtherwiseOption
    = optSpace "otherwise" optSpace Block

  PrintStatement
    = "roar" optSpace StringLiteral

  FunctionDeclaration
    = "ignite" optSpace Identifier optSpace "(" ParameterList? ")" Block

  ParameterList
    = Identifier ExtraParameters*
  ExtraParameters
    = (optSpace "," optSpace Identifier)

  AssignmentStatement
    = Identifier optSpace "=" optSpace Expression

  Block
    = "|" Statement* "|"

  Condition
    = Expression optSpace ComparisonOp optSpace Expression

  ComparisonOp
    = "is less than"
    | "is greater than"
    | "is equal to"
    | "=="            
    | "!="
    | ">="
    | "<="

  Expression 
    = Term (("+" | "-" | "*" | "/" | "%") Term)*  

  Term       
    = Factor (("*" | "/") Factor)*

  Factor
    = FunctionCall
    | Identifier
    | number
    | BooleanLiteral
    | ParenExpression

  ParenExpression
    = "(" Expression ")"

  Comment
    = "~" (~"~" any)* "~"

  Keyword
    = ("Prowl" | "if" | "otherwise" | "roar" | "ignite" | "else" | "range" | "serve" | "true" | "false")

  Identifier
    = (letter | "_")#(letter | digit | "_")*

  number
    = digit+

  StringLiteral
    = "-" (StringContent | Interpolation)* "-" 

  Interpolation
    = "${" Expression "}"

  StringContent
    = ~("-" | "${") any

  optSpace
    = space*

  space
    += " " | "\t" | "\n"
    
  ReturnStatement 
    = "serve" optSpace Expression
    
  BooleanLiteral
    = "true" | "false"
    
  FunctionCall
    = Identifier "(" ArgumentList? ")"
    
  ArgumentList 
    = Expression (optSpace "," optSpace Expression)*
}
